#+TITLE: Config
#+AUTHOR: adventureofe
#+STARTUP: overview
#+OPTIONS: num:t
#+LANGUAGE: en
#+DESCRIPTION:: my doom emacs config
#+KEYWORDS: config
#+CATEGORY: config

* doom stuff
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
;; (setq user-full-name "John Doe"
;;       user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
(setq doom-font (font-spec :family "Iosevka" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'cyberpunk)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
* exwm
#+begin_src  emacs-lisp
(require 'exwm)
(defun efs/run-in-background (command)
	  (let ((command-parts (split-string command "[ ]+")))
		  (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

 (defun efs/exwm-update-class ()
	  (exwm-workspace-rename-buffer exwm-class-name))

 (defun efs/exwm-update-title ()
	  (pcase exwm-class-name
		  ("Firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))

 (defun dw/exwm-init-hook ()
	  ;; Make workspace 1 be the one where we land at startup
	  (exwm-workspace-switch-create 1))

  (defun efs/configure-window-by-class ():
	   (interactive)
	   (pcase exwm-class-name
		  ("Firefox" (exwm-workspace-move-window 2))
		  ("Sol" (exwm-workspace-move-window 3))
		  ("mpv" (exwm-floating-toggle-floating)
		  (exwm-layout-toggle-mode-line))))

	;; This function should be used only after configuring autorandr!
	(defun efs/update-displays ()
		(efs/run-in-background "autorandr --change --force")
		(efs/set-wallpaper)
		(message "Display config: %s"
			(string-trim (shell-command-to-string "autorandr --current"))))

	(use-package exwm
	    :ensure t
	    :demand t
		:config
		(setq exwm-workspace-number 4)

		;; When window "class" updates, use it to set the buffer name
		(add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

		;; When window title updates, use it to set the buffer name
		(add-hook 'exwm-update-title-hook #'efs/exwm-update-title)

		;; Configure windows as they're created
		(add-hook 'exwm-manage-finish-hook #'efs/configure-window-by-class)

                (require 'exwm-randr)
                ;; Set workspace to the internal display
                (setq exwm-randr-workspace-monitor-plist '(0 "LVDS-1"))
                (add-hook 'exwm-randr-screen-change-hook
                          (lambda ()
                            (start-process-shell-command
                             "xrandr" nil "xrandr --output LVDS-1 --auto")))
                (exwm-randr-enable)

		(setq exwm-input-prefixkeys
			'(?\C-x
			?\C-u
			?\C-h
			?\M-x
			?\M-`
			?\M-&
			?\M-:
			?\C-\M-j
			?\C-\ ))

		;; Rebind CapsLock to Ctrl
		(start-process-shell-command "xmodmap" nil "xmodmap ~/.config/doom/Xmodmap")
		;;ctrl + q will enable the next key to be sent directly
		(define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

		;; Load the system tray before exwm-init
		(require 'exwm-systemtray)
		(setq exwm-systemtray-height 32)
		(exwm-systemtray-mode)

		(setq exwm-input-global-keys
			`(
				([?\s-r] . exwm-reset)
				([s-left] . windmove-left)
				([s-right]. windmove-right)
				([?\s-w] . exwm-workspace-switch)
				([?\s-&] . (lambda (command)
					(interactive (list (read-shell-command "$ ")))
					(start-process-shell-command command nil command)))

				;; Switch workspace
				([?\s-w] . exwm-workspace-switch)

				;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
				,@(mapcar (lambda (i)
					`(,(kbd (format "s-%d" i)) .
						(lambda ()
							(interactive)
							(exwm-workspace-switch-create ,i))))
					(number-sequence 0 9))))
		(exwm-enable))

#+end_src
* esc quits everyting
#+begin_src emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
* yas
#+begin_src
(setq yas-snippet-dirs '("~/.doom.d/snippets"))
(yas-reload-all)
#+end_src
* disable smart parens
#+BEGIN_SRC emacs-lisp
(smartparens-global-mode -1)
#+END_SRC
* line number
#+BEGIN_SRC emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC
* open alsamixer shortcut
#+BEGIN_SRC emacs-lisp
(defun mixer ()
  "Open Terminator"
  (interactive)
  (start-process-shell-command "terminator" nil "terminator -e alsamixer"))
#+END_SRC
* open firefox shortcut
#+BEGIN_SRC emacs-lisp
(defun firefox ()
  "Open firefox"
  (interactive)
  (start-process-shell-command "firefox" nil "firefox-developer-edition"))
#+END_SRC
* eshell aliases
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'eshell
  (eshell/alias "ls" "ls -halt --color=auto")
  (eshell/alias ".." "cd ..")
  (eshell/alias "..." "cd ../..")
  (eshell/alias "neofetch" "hyfetch")
  (eshell/alias "firefox" "firefox-developer-edition")
  )

#+END_SRC
